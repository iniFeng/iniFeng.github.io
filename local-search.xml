<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>字节跳动客户端提前批面试经历</title>
    <link href="/2020/07/13/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/"/>
    <url>/2020/07/13/%E5%AD%97%E8%8A%82%E8%B7%B3%E5%8A%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8F%90%E5%89%8D%E6%89%B9%E9%9D%A2%E8%AF%95%E7%BB%8F%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<p>秉持着重在参与的良好心态，我在提前批截止的前几天投了在字节里面听说最缺人的客户端开发岗位。此前没有把握投递，但最近的一次实习面试给了我这个蔡鸡一点点勇气，蛮投一投，简历过了就和面试官聊一聊，顺便也可以暴露出自己还有哪方面的知识欠缺。</p><p>面试过程中，我一边记录了一些面试官的问题，这里趁着刚面试完，记忆还算深刻，就发到这个博客上吧（顺便水一篇文章</p><h2 id="自我介绍"><a class="markdownIt-Anchor" href="#自我介绍"></a> 自我介绍</h2><h2 id="项目介绍"><a class="markdownIt-Anchor" href="#项目介绍"></a> 项目介绍</h2><p>由于没有什么项目经验，这里简历上写的是两个课程设计，大致上问了一下项目做了什么。有个项目是跟TCP连接有关，于是又问了Socket建立和TCP连接建立的过程。</p><h2 id="tcpudp"><a class="markdownIt-Anchor" href="#tcpudp"></a> TCP/UDP</h2><p>提问了</p><ol><li>TCP连接建立的过程</li><li>TCP怎么确保传输的可靠性</li><li>TCP连接建立之后是否可以双向发送数据</li><li>长连接KeepAlive</li></ol><p>这里答了TCP的三次握手和TCP丢包重传、拥塞控制、长连接由哪一端发出。</p><h2 id="linuxandroid方面的开发经验"><a class="markdownIt-Anchor" href="#linuxandroid方面的开发经验"></a> Linux/Android方面的开发经验</h2><p>有啥答啥。</p><h2 id="熟悉的数据结构"><a class="markdownIt-Anchor" href="#熟悉的数据结构"></a> 熟悉的数据结构</h2><p>可能想考哈希。</p><h2 id="堆和栈"><a class="markdownIt-Anchor" href="#堆和栈"></a> 堆和栈</h2><p>这里拉跨了。</p><h2 id="c语言"><a class="markdownIt-Anchor" href="#c语言"></a> C语言</h2><ol><li><p>指针占用多少字节，int占用多少字节 sizeof</p><p>int和指针占用的字节数跟系统有关；</p><p>指针的位数跟系统的寻址能力有关，64位机就是64位，即8个字节;</p></li><li><p>volatile;</p></li><li><p>如何通过指针来修改数组的值.</p></li></ol><h2 id="学校课程"><a class="markdownIt-Anchor" href="#学校课程"></a> 学校课程</h2><ol><li>设计模型</li><li>计组中开机的过程</li></ol><h2 id="平衡二叉树的时间复杂度"><a class="markdownIt-Anchor" href="#平衡二叉树的时间复杂度"></a> 平衡二叉树的时间复杂度</h2><h2 id="算法"><a class="markdownIt-Anchor" href="#算法"></a> 算法</h2><p>编程题就一道树的深度。</p><p>emmmmmm</p><h2 id="开放题"><a class="markdownIt-Anchor" href="#开放题"></a> 开放题</h2><p>两人轮流掷硬币，一方先掷出国徽面即可获胜，分别求出先手和后手获胜的几率。</p><p>用到一点概率论的知识。</p>]]></content>
    
    
    
    <tags>
      
      <tag>面经</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用代理Git Clone</title>
    <link href="/2020/07/06/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86Git-Clone/"/>
    <url>/2020/07/06/%E4%BD%BF%E7%94%A8%E4%BB%A3%E7%90%86Git-Clone/</url>
    
    <content type="html"><![CDATA[<p>Github由于DNS污染的原因，经常clone的速度不到10 kb/s，难以忍受。有时候要设置Git Clone的代理，又得上网搜索一番，这里就简单记录一下设置代理的过程，省去自己搜索的过程。</p><h2 id="使用代理"><a class="markdownIt-Anchor" href="#使用代理"></a> 使用代理</h2><p>首先得保证你有梯子能够正常访问Google，这样才可以配置Git通过代理访问，一般来说v2ray的全局模式是对git clone没有用的，git 命令并不走全局代理，需要额外在git config中配置</p><pre><code class="hljs plain"># 让所有git clone命令走代理# socks5协议，1080端口修改成自己的本地代理端口git config --global http.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080git config --global https.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080# http协议，1081端口修改成自己的本地代理端口git config --global http.proxy http:&#x2F;&#x2F;127.0.0.1:1081git config --global https.proxy https:&#x2F;&#x2F;127.0.0.1:1081</code></pre><p>以上配置会使得所有git命令走代理，包括国内的git仓库，有可能拖慢国内Git命令，甚至局域网内的操作。</p><p>因此建议仅针对Github进行配置，让Github走代理，不影响其他仓库的操作。</p><pre><code class="hljs plain"># socks5协议，1080端口修改成自己的本地代理端口git config --global http.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080git config --global https.https:&#x2F;&#x2F;github.com.proxy socks5:&#x2F;&#x2F;127.0.0.1:1080# http协议，1081端口修改成自己的本地代理端口git config --global http.https:&#x2F;&#x2F;github.com.proxy https:&#x2F;&#x2F;127.0.0.1:1081git config --global https.https:&#x2F;&#x2F;github.com.proxy https:&#x2F;&#x2F;127.0.0.1:1081</code></pre><p>其他Git配置命令</p><pre><code class="hljs plain"># 查看所有配置git config -l# reset 代理设置git config --global --unset http.proxygit config --global --unset https.proxy</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04 libLAS配置</title>
    <link href="/2020/05/24/Ubuntu16-04-Liblas%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/05/24/Ubuntu16-04-Liblas%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>Ubuntu16.04这个版本虽然教程多，但是网上大多数的教程都过于老旧，在这里记录一下我的配置libLAS的过程。</p><h2 id="需要安装的库"><a class="markdownIt-Anchor" href="#需要安装的库"></a> 需要安装的库</h2><p>这里为我设备上还需要安装的库，不一定都适用</p><ul><li><p>CMake</p></li><li><p>Boost 1.38.0及以上</p><p>apt安装即可</p></li></ul><pre><code class="hljs Ubuntu">sudo apt-get install libboost-all-dev</code></pre><ul><li><p>Geotiff</p><p>apt安装</p></li></ul><pre><code class="hljs Ubuntu">sudo apt-get install libgeotiff-dev</code></pre><h2 id="liblas"><a class="markdownIt-Anchor" href="#liblas"></a> libLAS</h2><p>下载地址：<a href="https://liblas.org/download.html" target="_blank" rel="noopener">libLAS</a></p><h3 id="解压并安装"><a class="markdownIt-Anchor" href="#解压并安装"></a> 解压并安装</h3><pre><code class="hljs Ubuntu">tar -zxvf libLAS-1.8.1-src.tar.bz2cd liblasmkdir makefilescmake ..makemake install&#x2F;&#x2F;&#x2F; 可能需要root权限sudo &#x2F;sbin&#x2F;ldconfig</code></pre><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><pre><code class="hljs plain">lasinfo ..test&#x2F;data&#x2F;TO_core_last_clip.las</code></pre><p>有输出点云即安装完成</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>libLAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu16.04 双系统双硬盘安装</title>
    <link href="/2020/05/23/Ubuntu16-04-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8F%8C%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/"/>
    <url>/2020/05/23/Ubuntu16-04-%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%8F%8C%E7%A1%AC%E7%9B%98%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>在网络上各种过时教程中摸索出来的成功安装Ubuntu16.04的方法，为了以防自己忘了怎么装双系统，又瞎Google百度CSDN，一顿操作之后还得按电源键重启，还是记录一下安装过程吧。</p><p>安装的机型为2018款LG Gram14，没有独立显卡</p><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ul><li><a href="https://rufus.ie/" target="_blank" rel="noopener">Rufus</a> 用于制作Ubuntu的启动盘</li><li><a href="https://releases.ubuntu.com/" target="_blank" rel="noopener">Ubuntu16.04镜像</a></li><li>一个容量大于4GB的U盘</li><li>磁盘管理中将按照自己所需，选中还有空余空间的卷，压缩卷，自己分配合适空间，注意不要格式化新的卷。</li><li>Windows电源设置中关闭快速启动</li></ul><h2 id="制作ubuntu启动盘"><a class="markdownIt-Anchor" href="#制作ubuntu启动盘"></a> 制作Ubuntu启动盘</h2><p>Rufus 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。</p><p>在如下场景中会非常有用：</p><ul><li>你需要把一些可引导的ISO格式的镜像（Windows，Linux，UEFI等）创建成USB安装盘的时候</li><li>你需要使用一个还没有安装操作系统的设备的时候</li><li>你需要从DOS系统刷写BIOS或者其他固件的时候</li><li>你需要运行一个非常底层的工具的时候</li></ul><p>这里，我们就需要将下载下来的Ubuntu镜像通过Rufus创建USB安装盘。</p><p><img src="/img/Rufus.png" srcset="/img/loading.gif" alt="Rufus" /></p><p>点击选择来选择需要使用的iso镜像文件，分区类型选择GPT使启动盘可以被UEFI识别，其余默认或者如图这样设置即可。</p><p>插入安装盘重启</p><h2 id="bios设置"><a class="markdownIt-Anchor" href="#bios设置"></a> Bios设置</h2><pre><code>笔者的Gram为开机时出现LG的Logo时，按下F2进入Bios</code></pre><ol><li><p>关闭Secure boot</p></li><li><p>开启/选用UEFI模式</p></li><li><p>Boot启动优先顺序，将U盘的优先级置于最高</p><p>（开机时Gram按F10可选择启动项）</p></li><li><p>F10保存配置并退出</p></li></ol><p>如果没有大碍，这里再次重启时应该会载入启动盘的Ubuntu安装引导界面。</p><h2 id="ubuntu的安装"><a class="markdownIt-Anchor" href="#ubuntu的安装"></a> Ubuntu的安装</h2><p>笔者这里是双硬盘，一块硬盘安装Windows 10，一块硬盘安装Ubuntu16.04。</p><p>这里的界面应该识别出Windows Boot Manager</p><ol><li>进入安装界面时，不要点有关联网的选项，不然可能拖慢安装速度</li><li>到分区的时候，选中自己分配出来的空闲的卷，添加swap, / ,/home分区，均为逻辑分区（好像主分区也问题不大），一般swap分区大小为内存的两倍（内存够大也可以不分swap），/分区类似Windows的C盘，大概分10-20GB.剩下的空间留给/home</li><li>启动引导程序选择Windows Boot Manager所在的分区</li><li>等待Ubuntu安装程序，泡杯卡布奇诺休息一下</li></ol><h2 id="尾声"><a class="markdownIt-Anchor" href="#尾声"></a> 尾声</h2><p>安装完之后重启应该是进入到Ubuntu的启动项可选择Ubuntu或者Windows Boot Manager，即进入Windows，到这里安装应该是完成了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Ubuntu</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2020/05/03/hello-hexo/"/>
    <url>/2020/05/03/hello-hexo/</url>
    
    <content type="html"><![CDATA[<p>这是我部署在VPS上的基于Hexo框架+Fluid主题的个人博客。原本想着自己建个简单的个人博客，用什么框架好呢，看到知乎上有人推荐Hexo，以及Hexo的Fluid这个Material Design的主题很对我的胃口，就决定是它了！</p><p>Hexo是使用Git来更新页面和发表文章的静态页面，本身很适合用Github Pages来作为载体，但是我觉得Github Pages连接方面不是很稳定，而且手头刚好有闲置的VPS和域名，就想把博客移植至到VPS上，过程也很简单，相当于在VPS上建了个Git私有库。</p><p>作为第一篇博客，就在这里记录一下建站的心路历程吧！</p><h2 id="搭建步骤"><a class="markdownIt-Anchor" href="#搭建步骤"></a> 搭建步骤</h2><ul><li>Git</li><li>Node.js</li><li>Hexo</li><li>Fluid主题</li><li>Gulp压缩静态资源</li><li>VPS环境构建:<ul><li>Git私有库</li><li>创建git用户并设置用户的SSH</li><li>Nginx</li></ul></li></ul><h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2><p>网上关于Hexo的搭建和部署教程已经很多了，这里就放一些自己搭建时参考的教程。</p><ul><li><p><a href="https://zhuanlan.zhihu.com/p/82437065" target="_blank" rel="noopener">环境搭建</a></p></li><li><p><a href="https://fluid-dev.github.io/hexo-fluid-docs/" target="_blank" rel="noopener">Fluid主题</a></p></li><li><p><a href="https://www.voidking.com/dev-hexo-gulp/" target="_blank" rel="noopener">Gulp压缩静态资源</a></p></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Fluid</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
